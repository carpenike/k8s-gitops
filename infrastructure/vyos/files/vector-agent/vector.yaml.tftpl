---
data_dir: /var/lib/vector
sources:
  journal_logs:
    type: journald
    journal_directory: /var/log/journal

transforms:
  route_log_type:
    type: route
    inputs:
      - journal_logs
    route:
      firewall: >-
        .SYSLOG_IDENTIFIER == "kernel"
        && match!(.message, r'^\[(.*?)\](.*)')
      other: >-
        .SYSLOG_IDENTIFIER != "kernel"
        || !match!(.message, r'^\[(.*?)\](.*)')

  enrich_firewall_msg:
    type: remap
    inputs:
      - route_log_type.firewall
    source: |
      # Parse firewall rule message
      split_message, split_err = parse_regex(.message, r'^\[(?P<rule>.*?)\](?P<fields>.*)')
      if split_err != null {
        abort
      }

      # Extract separate fields from message
      split_message.fields, split_err = strip_whitespace(split_message.fields)
      if split_err != null {
        abort
      }
      .message, parse_err = parse_key_value(split_message.fields, whitespace: "strict")
      if parse_err != null {
        abort
      }

      # Add more information about the triggered rule
      .message.RULE, parse_err = parse_regex(split_message.rule, r'^(?P<from_zone>\w+)-(?P<to_zone>\w+)-(?P<id>\w+)-(?P<action>\w+)$')
      if parse_err != null {
        abort
      }

sinks:
  vector_journal:
    type: vector
    inputs:
      - route_log_type.other
      - enrich_firewall_msg
    address: "${address_book.services.k8s_vector_aggregator.ipv4_addr}:6001"
    version: "2"
